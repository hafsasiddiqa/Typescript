"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.syndProcess = void 0;
const fs_1 = __importDefault(require("fs"));
const kleur_1 = __importDefault(require("kleur"));
const process_1 = __importDefault(require("process"));
const lodash_debounce_1 = __importDefault(require("lodash.debounce"));
const getRsyncFunc_1 = require("./getRsyncFunc");
const utils_1 = require("./utils");
const syndProcess = (name, cmd) => {
    const syndConfig = (0, utils_1.getConfig)();
    if (cmd.list === true) {
        utils_1.log.plain(`Your presets:`);
        utils_1.log.plain(Object.keys(syndConfig)
            .map(k => `- ${k}`)
            .join('\n'));
        process_1.default.exit(0);
    }
    if (name === undefined) {
        (0, utils_1.log)(`Preset name is missing, exiting. Run "synd <preset-name>". Exiting`);
        process_1.default.exit(0);
    }
    (0, utils_1.log)(`Going to try to do the "${name}" preset`);
    /**
     * validated preset with defaults
     */
    const userConfig = (0, utils_1.parseConfig)(syndConfig, name);
    const { include, exclude } = (0, utils_1.getPaths)(userConfig);
    const filterFilePath = (0, utils_1.getFilterFile)({
        name: userConfig.name,
        include,
        exclude,
    });
    (0, utils_1.log)(`about to sync \n\t${userConfig.src} to \n\t${userConfig.dest}\n\n`);
    const syncCommand = (0, getRsyncFunc_1.getRsyncFunc)({
        ...userConfig,
        include,
        exclude,
        filterFilePath,
    });
    if (userConfig.showRsyncCommand) {
        (0, utils_1.log)(`rsync command\n\n${syncCommand.command()}`);
    }
    const logDoneUploading = () => {
        (0, utils_1.log)(`${kleur_1.default.green('done')}`);
    };
    const syncUp = (0, lodash_debounce_1.default)(() => syncCommand.execute(logDoneUploading), 100);
    if (userConfig.watch) {
        function onFileChange(eventType, filename) {
            (0, utils_1.log)(`${kleur_1.default.yellow(eventType)} ${filename}`);
            syncUp();
        }
        fs_1.default.watch(userConfig.src, { recursive: true }, onFileChange);
    }
    if (userConfig.initSync === true)
        syncUp();
};
exports.syndProcess = syndProcess;
