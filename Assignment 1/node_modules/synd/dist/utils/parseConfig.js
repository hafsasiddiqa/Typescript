"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseConfig = void 0;
const validatePresetConfig_1 = require("./validatePresetConfig");
const log_1 = __importDefault(require("./log"));
const DEFAULT_CONFIG = {
    initSync: false,
    watch: true,
    include: [],
    exclude: [],
    globalGitignore: false,
    localGitignore: false,
    parseOutput: false,
    showRsyncCommand: false,
};
const CONFIG_NAME = '.synd.config.js';
const omitServerProp = ({ 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
server, ...rest }) => rest;
const parseConfig = (syndConfig, name) => {
    if (!(name in syndConfig)) {
        log_1.default.errorAndExit(`${name} is not in your ${CONFIG_NAME} file`);
    }
    const presetConfig = syndConfig[name];
    (0, validatePresetConfig_1.validatePresetConfig)(presetConfig, name);
    // TODO move to pre execute helper
    const dest = presetConfig.server && typeof presetConfig.server === 'string'
        ? `${presetConfig.server}:${presetConfig.dest}`
        : presetConfig.dest;
    return { ...DEFAULT_CONFIG, ...omitServerProp(presetConfig), dest, name };
};
exports.parseConfig = parseConfig;
