"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const log_1 = __importDefault(require("./log"));
const CONFIG_NAME = 'synd.config.js';
const load = (configPath) => {
    try {
        const userConfig = require(configPath);
        if (typeof userConfig !== 'object' ||
            userConfig === null ||
            Array.isArray(userConfig)) {
            throw new Error('invalid config');
        }
        return userConfig;
    }
    catch (e) {
        return log_1.default.errorAndExit(`${configPath} is not a valid synd config`);
    }
};
const getConfig = () => {
    if (process.env.XDG_CONFIG_HOME) {
        const configPath = path_1.default.join(process.env.XDG_CONFIG_HOME, CONFIG_NAME);
        if (fs_1.default.existsSync(configPath)) {
            return load(configPath);
        }
    }
    const configPath = path_1.default.resolve(os_1.default.homedir(), CONFIG_NAME);
    if (!fs_1.default.existsSync(configPath)) {
        return log_1.default.errorAndExit(`${CONFIG_NAME} does not exist, please create one to use synd`);
    }
    return load(configPath);
};
exports.getConfig = getConfig;
