"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilterFile = exports.getFilterDirPath = void 0;
const fs_1 = __importDefault(require("fs"));
const process_1 = __importDefault(require("process"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const log_1 = __importDefault(require("./log"));
const getMd5Hash_1 = require("./getMd5Hash");
const version = require('../../package.json').version;
function getFilterDirPath(process) {
    if (process.env.XDG_CACHE_HOME) {
        return path_1.default.join(process.env.XDG_CACHE_HOME, 'synd', version);
    }
    const cacheDir = path_1.default.join(os_1.default.homedir(), '.cache');
    if (fs_1.default.existsSync(cacheDir)) {
        return path_1.default.join(cacheDir, 'synd', version);
    }
    return path_1.default.resolve(os_1.default.homedir(), '.synd');
}
exports.getFilterDirPath = getFilterDirPath;
const getFilterFile = ({ include, exclude, name, }) => {
    if (include.length === 0 && exclude.length === 0) {
        return null;
    }
    // TODO swap excludes with includes
    const content = [
        exclude.map(rule => `- ${rule}`).join('\n'),
        include.map(rule => `+ ${rule}`).join('\n'),
    ].join('\n');
    const hash = (0, getMd5Hash_1.getMd5Hash)(content);
    const filterDirPath = getFilterDirPath(process_1.default);
    if (!fs_1.default.existsSync(filterDirPath)) {
        (0, log_1.default)("synd cache dir not present, so let's create it");
        fs_1.default.mkdirSync(filterDirPath, { recursive: true });
    }
    const filterFileName = `${name}.${hash}.filter`;
    const filterFilePath = path_1.default.resolve(filterDirPath, filterFileName);
    if (!fs_1.default.existsSync(filterFilePath)) {
        (0, log_1.default)(`filter file not preset, creating ${filterFilePath}`);
        fs_1.default.writeFileSync(filterFilePath, content);
    }
    else {
        (0, log_1.default)(`found filter file, using it "${filterFilePath}"`);
    }
    return filterFilePath;
};
exports.getFilterFile = getFilterFile;
